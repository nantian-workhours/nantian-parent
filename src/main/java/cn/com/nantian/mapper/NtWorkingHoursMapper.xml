<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.nantian.mapper.NtWorkingHoursMapper" >
  <resultMap id="BaseResultMap" type="cn.com.nantian.pojo.NtWorkingHours" >
    <id column="PER_ID" property="perId" jdbcType="INTEGER" />
    <id column="WORK_DATE" property="workDate" jdbcType="DATE" />
    <result column="NORMAL_HOURS" property="normalHours" jdbcType="REAL" />
    <result column="OVERTIME_HOURS" property="overtimeHours" jdbcType="REAL" />
    <result column="SIGNIN_TIME" property="signinTime" jdbcType="TIME" />
    <result column="SIGNBACK_TIME" property="signbackTime" jdbcType="TIME" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    PER_ID, WORK_DATE, NORMAL_HOURS, OVERTIME_HOURS, SIGNIN_TIME, SIGNBACK_TIME
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.com.nantian.pojo.NtWorkingHoursExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from nt_working_hours
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="cn.com.nantian.pojo.NtWorkingHoursKey" >
    select 
    <include refid="Base_Column_List" />
    from nt_working_hours
    where PER_ID = #{perId,jdbcType=INTEGER}
      and WORK_DATE = #{workDate,jdbcType=DATE}
  </select>

  <select id="selectByOne" resultMap="BaseResultMap"   >
    select
    <include refid="Base_Column_List" />
    from nt_working_hours
    where PER_ID = #{perId,jdbcType=INTEGER}
      and WORK_DATE = #{workDate,jdbcType=DATE}

  </select>


  <delete id="deleteByPrimaryKey" parameterType="cn.com.nantian.pojo.NtWorkingHoursKey" >
    delete from nt_working_hours
    where PER_ID = #{perId,jdbcType=INTEGER}
      and WORK_DATE = #{workDate,jdbcType=DATE}
  </delete>
  <delete id="deleteByExample" parameterType="cn.com.nantian.pojo.NtWorkingHoursExample" >
    delete from nt_working_hours
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.com.nantian.pojo.NtWorkingHours" >
    insert into nt_working_hours (PER_ID, WORK_DATE, NORMAL_HOURS, 
      OVERTIME_HOURS, SIGNIN_TIME, SIGNBACK_TIME
      )
    values (#{perId,jdbcType=INTEGER}, #{workDate,jdbcType=DATE}, #{normalHours,jdbcType=REAL},
      #{overtimeHours,jdbcType=REAL}, #{signinTime,jdbcType=TIME}, #{signbackTime,jdbcType=TIME}
      )
  </insert>



  <insert id="insertOne" parameterType="cn.com.nantian.pojo.NtWorkingHours" >
    insert into nt_working_hours (PER_ID, WORK_DATE, NORMAL_HOURS,
    OVERTIME_HOURS
    )
    values (#{perId,jdbcType=INTEGER}, #{workDate,jdbcType=DATE}, #{normalHours,jdbcType=REAL},
    #{overtimeHours,jdbcType=REAL}
    )
  </insert>

  <insert id="insertOneTmpLife" parameterType="cn.com.nantian.pojo.NtWorkingHours" >
    insert into nt_working_hours (PER_ID, WORK_DATE, SIGNIN_TIME, SIGNBACK_TIME
    )
    values (#{perId,jdbcType=INTEGER}, #{workDate,jdbcType=DATE},
    #{signinTime,jdbcType=TIME}, #{signbackTime,jdbcType=TIME}
    )
  </insert>


  <insert id="insertSelective" parameterType="cn.com.nantian.pojo.NtWorkingHours" >
    insert into nt_working_hours
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="perId != null" >
        PER_ID,
      </if>
      <if test="workDate != null" >
        WORK_DATE,
      </if>
      <if test="normalHours != null" >
        NORMAL_HOURS,
      </if>
      <if test="overtimeHours != null" >
        OVERTIME_HOURS,
      </if>
      <if test="signinTime != null" >
        SIGNIN_TIME,
      </if>
      <if test="signbackTime != null" >
        SIGNBACK_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="perId != null" >
        #{perId,jdbcType=INTEGER},
      </if>
      <if test="workDate != null" >
        #{workDate,jdbcType=DATE},
      </if>
      <if test="normalHours != null" >
        #{normalHours,jdbcType=REAL},
      </if>
      <if test="overtimeHours != null" >
        #{overtimeHours,jdbcType=REAL},
      </if>
      <if test="signinTime != null" >
        #{signinTime,jdbcType=TIME},
      </if>
      <if test="signbackTime != null" >
        #{signbackTime,jdbcType=TIME},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.com.nantian.pojo.NtWorkingHoursExample" resultType="java.lang.Integer" >
    select count(*) from nt_working_hours
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update nt_working_hours
    <set >
      <if test="record.perId != null" >
        PER_ID = #{record.perId,jdbcType=INTEGER},
      </if>
      <if test="record.workDate != null" >
        WORK_DATE = #{record.workDate,jdbcType=DATE},
      </if>
      <if test="record.normalHours != null" >
        NORMAL_HOURS = #{record.normalHours,jdbcType=REAL},
      </if>
      <if test="record.overtimeHours != null" >
        OVERTIME_HOURS = #{record.overtimeHours,jdbcType=REAL},
      </if>
      <if test="record.signinTime != null" >
        SIGNIN_TIME = #{record.signinTime,jdbcType=TIME},
      </if>
      <if test="record.signbackTime != null" >
        SIGNBACK_TIME = #{record.signbackTime,jdbcType=TIME},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update nt_working_hours
    set PER_ID = #{record.perId,jdbcType=INTEGER},
      WORK_DATE = #{record.workDate,jdbcType=DATE},
      NORMAL_HOURS = #{record.normalHours,jdbcType=REAL},
      OVERTIME_HOURS = #{record.overtimeHours,jdbcType=REAL},
      SIGNIN_TIME = #{record.signinTime,jdbcType=TIME},
      SIGNBACK_TIME = #{record.signbackTime,jdbcType=TIME}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.com.nantian.pojo.NtWorkingHours" >
    update nt_working_hours
    <set >
      <if test="normalHours != null" >
        NORMAL_HOURS = #{normalHours,jdbcType=REAL},
      </if>
      <if test="overtimeHours != null" >
        OVERTIME_HOURS = #{overtimeHours,jdbcType=REAL},
      </if>
      <if test="signinTime != null" >
        SIGNIN_TIME = #{signinTime,jdbcType=TIME},
      </if>
      <if test="signbackTime != null" >
        SIGNBACK_TIME = #{signbackTime,jdbcType=TIME},
      </if>
    </set>
    where PER_ID = #{perId,jdbcType=INTEGER}
      and WORK_DATE = #{workDate,jdbcType=DATE}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.com.nantian.pojo.NtWorkingHours" >
    update nt_working_hours
    set NORMAL_HOURS = #{normalHours,jdbcType=REAL},
      OVERTIME_HOURS = #{overtimeHours,jdbcType=REAL},
      SIGNIN_TIME = #{signinTime,jdbcType=TIME},
      SIGNBACK_TIME = #{signbackTime,jdbcType=TIME}
    where PER_ID = #{perId,jdbcType=INTEGER}
      and WORK_DATE = #{workDate,jdbcType=DATE}
  </update>
</mapper>